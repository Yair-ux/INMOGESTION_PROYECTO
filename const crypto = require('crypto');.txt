const crypto = require('crypto');
const nodemailer = require('nodemailer');
const express = require('express');
const router = express.Router();
const User = require('../models/User');
const bcrypt = require('bcrypt');

// POST /forgot-password
router.post('/forgot-password', async (req, res) => {
  const { email } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(404).send('Usuario no encontrado');

  const token = crypto.randomBytes(32).toString('hex');
  user.resetToken = token;
  user.resetTokenExpiry = Date.now() + 3600000; // 1 hora
  await user.save();

  // Configura tu transporte de correo
  const transporter = nodemailer.createTransport({ /* ...config... */ });
  const resetUrl = `https://tusitio.com/reset-password/${token}`;
  await transporter.sendMail({
    to: user.email,
    subject: 'Recupera tu contraseña',
    text: `Haz clic aquí para restablecer tu contraseña: ${resetUrl}`,
  });

  res.send('Correo de recuperación enviado');
});

// POST /reset-password/:token
router.post('/reset-password/:token', async (req, res) => {
  const { token } = req.params;
  const { password } = req.body;
  const user = await User.findOne({
    resetToken: token,
    resetTokenExpiry: { $gt: Date.now() }
  });
  if (!user) return res.status(400).send('Token inválido o expirado');

  user.password = await bcrypt.hash(password, 10);
  user.resetToken = undefined;
  user.resetTokenExpiry = undefined;
  await user.save();

  res.send('Contraseña actualizada');
});

module.exports = router;